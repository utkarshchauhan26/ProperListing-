// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  phone       String?  @unique
  name        String
  userType    UserType @default(STUDENT)
  password    String?  // For email/password auth
  verified    Boolean  @default(false)
  avatar      String?
  whatsapp    String?  // WhatsApp number for landlords
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // NextAuth.js required fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Relations
  properties Property[]
  wishlist   Wishlist[]
  inquiries  Inquiry[]
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserType {
  STUDENT
  LANDLORD
  ADMIN
}

model Property {
  id           String       @id @default(cuid())
  title        String
  description  String?
  rent         Int
  location     String
  roomType     RoomType
  propertyType PropertyType
  amenities    String[]
  images       PropertyImage[]
  verified     Boolean      @default(false)
  available    Boolean      @default(true)
  
  // Detailed property info
  address      String?
  city         String?
  state        String?
  pincode      String?
  
  // Lifestyle rules
  smoking      Boolean      @default(false)
  drinking     Boolean      @default(false)
  pets         Boolean      @default(false)
  visitors     Boolean      @default(false)
  
  // Contact info
  whatsappNumber String?
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  owner        User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  wishlist     Wishlist[]
  inquiries    Inquiry[]
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  filename   String
  size       Int
  order      Int      @default(0)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Inquiry {
  id          String      @id @default(cuid())
  contactType ContactType
  message     String?
  status      InquiryStatus @default(NEW)
  userPhone   String?
  userEmail   String?
  userName    String?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  property    Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
}

enum PropertyType {
  PG
  FLAT
  INDEPENDENT
  SHARED
  COLIVING
}

enum RoomType {
  SINGLE
  SHARED
  ONE_BHK
  TWO_BHK
  THREE_BHK
  STUDIO
}

enum ContactType {
  WHATSAPP
  PHONE
  EMAIL
  CONTACT_FORM
}

enum InquiryStatus {
  NEW
  CONTACTED
  CLOSED
  SPAM
}

model Wishlist {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())
  
  @@unique([userId, propertyId])
}
